<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sects on OS Dev</title>
    <link>http://bumbread.github.io/sects/</link>
    <description>Recent content in Sects on OS Dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="http://bumbread.github.io/sects/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>http://bumbread.github.io/sects/boot-sector/bios/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://bumbread.github.io/sects/boot-sector/bios/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>http://bumbread.github.io/sects/boot-sector/mbr/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://bumbread.github.io/sects/boot-sector/mbr/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Disk organization</title>
      <link>http://bumbread.github.io/sects/boot-sector/disks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://bumbread.github.io/sects/boot-sector/disks/</guid>
      <description>Disk organization #  We had already discussed that the during IBM PC time the main two non-volatile memory storage devices were Hard drives and Floppy disks, which turn out to have similar structure.
So it would be useful to discuss the physical structure of the hard drives first.
Physical structure #  The disk consists of basic addressable units &amp;ndash; sectors. One can not read or write less than a sector direcrly off of a disk.</description>
    </item>
    
    <item>
      <title>Hardware communication</title>
      <link>http://bumbread.github.io/sects/boot-sector/hw-communication/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://bumbread.github.io/sects/boot-sector/hw-communication/</guid>
      <description>Hardware communication #  Inside a computer there are various hardware components: RAM, CPU, Monitor, Hard drive, plug-in devices and so on. These devices have to be able to talk to each other in some way.
The way in which that is done is via connecting the hardware components to the same sets of wires. One set of wires is for specifying the value to transfer between devices, the other set of wires is for specifying the address to transfer the data to.</description>
    </item>
    
    <item>
      <title>Harware communication</title>
      <link>http://bumbread.github.io/sects/boot-sector/hardware-communication/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://bumbread.github.io/sects/boot-sector/hardware-communication/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Memory organization</title>
      <link>http://bumbread.github.io/sects/boot-sector/memory/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://bumbread.github.io/sects/boot-sector/memory/</guid>
      <description>Memory organization in x86 real mode #  As was discussed earler all later x86 processors start in real mode, which limits data operands to 16 bits and the address bus to 20 bits. The processor can use segmentation to access the memory beyond 64 Kb.
After BIOS loads MBR into RAM, the memory is in a certain state.
   Address range Size Description     00000-9FFFF 640 kb RAM   A0000-BFFFF 128 kb Video display memory   C0000-FFFFF 256 kb Motherboard ROM    The first 640 Kb make the Conventional RAM &amp;ndash; the part of memory that can be freely used by the programs to store their data etc.</description>
    </item>
    
    <item>
      <title>Overview of PC history</title>
      <link>http://bumbread.github.io/sects/boot-sector/pc-history/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://bumbread.github.io/sects/boot-sector/pc-history/</guid>
      <description>Overview of PC history #  Before we dive into inspecting various components that participate in boot-time function of the OS, I would like to make a special overview of the history of PCs. This will make the understanding of BIOS as well as other &amp;ldquo;features&amp;rdquo; of the booting process much easier.
The term PC as in &amp;ldquo;Personal Computer&amp;rdquo; was mainly due to one mainstream computer from IBM called the IBM PC.</description>
    </item>
    
    <item>
      <title>When the power button is hit..</title>
      <link>http://bumbread.github.io/sects/boot-sector/power-button/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://bumbread.github.io/sects/boot-sector/power-button/</guid>
      <description>When the power button is hit.. #  .. A set of actions is performed by different components of your PC. The power button is connected to a motherboard (also called main board or system board) - the heart of your computer.
Power on #  After you hit the button, the first thing motherboard tries is to provide various components with electrical power. However there may be various instabilities in the electrical current.</description>
    </item>
    
    <item>
      <title>x86</title>
      <link>http://bumbread.github.io/sects/boot-sector/x86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://bumbread.github.io/sects/boot-sector/x86/</guid>
      <description>The x86 processors #  Now we&amp;rsquo;ll talk about the x86 processors.
The 8086 processor had 16-bit data bus and 20-bit address bus. All x86 processors start in the real mode, that basically restricts the operands to 16 bits and the address bus to 20 bits, making the processor compatible with 8086.
The general purpose registers are the registers that can be used for most operations by the processor are AX, BX, CX, DX, SI (source index), and DI (destination index).</description>
    </item>
    
  </channel>
</rss>
