<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>OS development notes</title>
    <link>http://bumbread.github.io/</link>
    <description>Recent content on OS development notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="http://bumbread.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>BIOS</title>
      <link>http://bumbread.github.io/sects/boot-sector/bios/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://bumbread.github.io/sects/boot-sector/bios/</guid>
      <description>BIOS &amp;ndash; Basic Input-Output System #  BIOS is a program that is stored on the Motherboard ROM. When CPU starts up the first thing that runs is BIOS code. BIOS performs the following:
 Initializes hardware (display, keyboard, disk) drivers that are necessary for the OS to boot. Sets up its API for use by the OS in the form of Interrupts. Reads setup information stored in CMOS (a special memory chip on motherboard) and find the first Bootable disk.</description>
    </item>
    
    <item>
      <title>Disk organization</title>
      <link>http://bumbread.github.io/sects/boot-sector/disks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://bumbread.github.io/sects/boot-sector/disks/</guid>
      <description>Disk organization #  We had already discussed that the during IBM PC time the main two non-volatile memory storage devices were Hard drives and Floppy disks, which turn out to have similar structure.
So it would be useful to discuss the physical structure of the hard drives first.
Physical structure #  The disk consists of basic addressable units &amp;ndash; sectors. One can not read or write less than a sector direcrly off of a disk.</description>
    </item>
    
    <item>
      <title>Hardware communication</title>
      <link>http://bumbread.github.io/sects/boot-sector/hw-communication/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://bumbread.github.io/sects/boot-sector/hw-communication/</guid>
      <description>Hardware communication #  Inside a computer there are various hardware components: RAM, CPU, Monitor, Hard drive, plug-in devices and so on. These devices have to be able to talk to each other in some way.
The way in which that is done is via connecting the hardware components to the same sets of wires. One set of wires is for specifying the value to transfer between devices, the other set of wires is for specifying the address to transfer the data to.</description>
    </item>
    
    <item>
      <title>Harware communication</title>
      <link>http://bumbread.github.io/sects/boot-sector/hardware-communication/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://bumbread.github.io/sects/boot-sector/hardware-communication/</guid>
      <description></description>
    </item>
    
    <item>
      <title>MBR</title>
      <link>http://bumbread.github.io/sects/boot-sector/mbr/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://bumbread.github.io/sects/boot-sector/mbr/</guid>
      <description>MBR &amp;ndash; Master boot record #  MBR refers to the very first 512 bytes of the disk. MBR is loaded by BIOS into the memory at address 7C00. The MBR holds the code and some metadata about the drive that the OS can use in the boot process, as well as OS&amp;rsquo;s bootloader itself.
Here&amp;rsquo;s the basic structure of the MBR:
   Address Size Description     0000-01BD 446 byte Bootloader   01BE-01CD 16 byte 1-st partition entry   01CE-01DD 16 byte 2-nd partition entry   01DE-01ED 16 byte 3-rd partition entry   01EE-01FD 16 byte 4-th partition entry   01FE-01FF 2 byte Magic number 55h AAh    The magic number is used by the BIOS to determine whether the disk is bootable.</description>
    </item>
    
    <item>
      <title>Memory organization</title>
      <link>http://bumbread.github.io/sects/boot-sector/memory/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://bumbread.github.io/sects/boot-sector/memory/</guid>
      <description>Memory organization in x86 real mode #  As was discussed earler all later x86 processors start in real mode, which limits data operands to 16 bits and the address bus to 20 bits. The processor can use segmentation to access the memory beyond 64 Kb.
After BIOS loads MBR into RAM, the memory is in a certain state.
   Address range Size Description     00000-9FFFF 640 kb RAM   A0000-BFFFF 128 kb Video display memory   C0000-FFFFF 256 kb Motherboard ROM    The first 640 Kb make the Conventional RAM &amp;ndash; the part of memory that can be freely used by the programs to store their data etc.</description>
    </item>
    
    <item>
      <title>Overview of PC history</title>
      <link>http://bumbread.github.io/sects/boot-sector/pc-history/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://bumbread.github.io/sects/boot-sector/pc-history/</guid>
      <description>Overview of PC history #  Before we dive into inspecting various components that participate in boot-time function of the OS, I would like to make a special overview of the history of PCs. This will make the understanding of BIOS as well as other &amp;ldquo;features&amp;rdquo; of the booting process much easier.
The term PC was due to one mainstream computer from IBM called the IBM PC. Nowadays the term &amp;ldquo;PC&amp;rdquo; most of the time refers to an x86 computer capable of running Windows, Linux.</description>
    </item>
    
    <item>
      <title>When the power button is hit..</title>
      <link>http://bumbread.github.io/sects/boot-sector/power-button/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://bumbread.github.io/sects/boot-sector/power-button/</guid>
      <description>When the power button is hit.. #  .. your computer tries to start up and launch the OS. The power button is connected to a motherboard (also called main board or system board) - the heart of your computer.
Power on #  After you hit the button, the first thing motherboard tries is to provide computer components with electrical power. It can not do it directly, i.e. connect the power button to the power supply, because if there is a voltage jump or another instability in current, this may easily kill the components inside the computer.</description>
    </item>
    
    <item>
      <title>x86</title>
      <link>http://bumbread.github.io/sects/boot-sector/x86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://bumbread.github.io/sects/boot-sector/x86/</guid>
      <description>The x86 processors #  Now we&amp;rsquo;ll talk about the x86 processors.
The 8086 processor had 16-bit data bus and 20-bit address bus. All x86 processors start in the real mode, that basically restricts the operands to 16 bits and the address bus to 20 bits, making the processor compatible with 8086.
The general purpose registers are the registers that can be used for most operations by the processor are AX, BX, CX, DX, SI (source index), and DI (destination index).</description>
    </item>
    
  </channel>
</rss>
